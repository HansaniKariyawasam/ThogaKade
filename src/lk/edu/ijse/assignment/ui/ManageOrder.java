/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lk.edu.ijse.assignment.ui;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import lk.edu.ijse.assignment.controller.ControllerFactory;
import lk.edu.ijse.assignment.controller.custom.CashierController;
import lk.edu.ijse.assignment.dto.CustomerDTO;
import lk.edu.ijse.assignment.dto.ItemDTO;
import lk.edu.ijse.assignment.dto.OrderDetailDTO;
import lk.edu.ijse.assignment.dto.OrdersDTO;

/**
 *
 * @author Hansani Kariyawasam
 */
public class ManageOrder extends javax.swing.JPanel {
        private CashierController ctrlCashier;
        private List<CustomerDTO> customerList;
        private List<OrdersDTO> ordersList;
        private List<ItemDTO> itemList;
        private List<OrderDetailDTO> orderDetailList;
        private double grandTot;
        public static List<OrderDetailDTO> list;
        
        private List<ItemDTO> updateList=new ArrayList<>();
        private List<OrderDetailDTO> orderList=new ArrayList<>();
        private List<OrderDetailDTO> removeOrdersList=new ArrayList<>();

    /**
     * Creates new form ManageOrder
     */
    public ManageOrder() {
        initComponents();
        
        ctrlCashier=(CashierController) ControllerFactory.getInstance().getControllerType(ControllerFactory.ControllerType.CASHIER);
        viewCustomerDetails();
        loadItem();
    }
    
    public void viewCustomerDetails(){
        try {
            orderDetailList=ctrlCashier.viewOrderDetails();
            itemList=ctrlCashier.getStockDetails();
            customerList=ctrlCashier.viewCustomerDetails();
            cmbCustomerName.removeAllItems();
            if(customerList!=null){   
                for (CustomerDTO c : customerList) {
                    cmbCustomerName.addItem(c.getCustomerName());
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(PlaceNewOrder.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void loadItem(){
            try {
                
                
                if(itemList!=null){
                    for (ItemDTO i : itemList) {
                        cmbItem.addItem(i.getDescription());
                    }
                }
            } catch (Exception ex) {
                Logger.getLogger(ManageOrder.class.getName()).log(Level.SEVERE, null, ex);
            }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cmbOrderID = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        txtOrderDate = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtOldTotal = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtTel = new javax.swing.JTextField();
        lblConfirm = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblManageOrder = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtUnitPrice = new javax.swing.JTextField();
        txtQty = new javax.swing.JTextField();
        txtQtyOnHand = new javax.swing.JTextField();
        txtNewTotal = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        lblRemove = new javax.swing.JLabel();
        lblSave = new javax.swing.JLabel();
        cmbCustomerName = new javax.swing.JComboBox();
        lblClose = new javax.swing.JLabel();
        cmbItem = new javax.swing.JComboBox();

        setBackground(new java.awt.Color(210, 240, 252));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Manage Order");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 0, 185, 50));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel3.setText("Customer Name");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(408, 50, 110, 28));

        cmbOrderID.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbOrderIDItemStateChanged(evt);
            }
        });
        add(cmbOrderID, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 110, 100, 25));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setText("Order ID");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, 110, 28));

        txtOrderDate.setEditable(false);
        add(txtOrderDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 150, 160, 25));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel4.setText("Contact ");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 110, 88, 28));

        txtOldTotal.setEditable(false);
        add(txtOldTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 150, 160, 25));

        jSeparator2.setBackground(new java.awt.Color(133, 141, 144));
        add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, 650, 10));

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel5.setText("Previous Total");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 150, 88, 28));

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel7.setText("Order Date");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 150, 88, 28));

        txtTel.setEditable(false);
        add(txtTel, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 110, 160, 25));

        lblConfirm.setBackground(new java.awt.Color(133, 141, 144));
        lblConfirm.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblConfirm.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblConfirm.setText("Confirm Order");
        lblConfirm.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblConfirm.setOpaque(true);
        lblConfirm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblConfirmMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblConfirmMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblConfirmMouseExited(evt);
            }
        });
        add(lblConfirm, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 470, 110, 30));

        jSeparator3.setBackground(new java.awt.Color(133, 141, 144));
        add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 650, 10));

        tblManageOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Code", "Description", "Qty", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblManageOrder.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tblManageOrder.getTableHeader().setReorderingAllowed(false);
        tblManageOrder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblManageOrderMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblManageOrder);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, 620, 110));

        jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel8.setText("Item Name");
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 370, 110, 28));

        jLabel9.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel9.setText("Qty On Hand");
        add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 410, 88, 28));

        jLabel11.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel11.setText("Order Qty ");
        add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 410, 88, 28));

        jLabel10.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel10.setText("Unit Price");
        add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 370, 88, 28));

        txtUnitPrice.setEditable(false);
        add(txtUnitPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 370, 160, 25));

        txtQty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQtyActionPerformed(evt);
            }
        });
        txtQty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtQtyKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtQtyKeyTyped(evt);
            }
        });
        add(txtQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 410, 160, 25));

        txtQtyOnHand.setEditable(false);
        add(txtQtyOnHand, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 410, 160, 25));

        txtNewTotal.setEditable(false);
        add(txtNewTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 470, 100, 25));

        jLabel12.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel12.setText("New Total");
        add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 470, 70, 28));

        lblRemove.setBackground(new java.awt.Color(133, 141, 144));
        lblRemove.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblRemove.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblRemove.setText("Remove");
        lblRemove.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblRemove.setOpaque(true);
        lblRemove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblRemoveMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblRemoveMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblRemoveMouseExited(evt);
            }
        });
        add(lblRemove, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 330, 80, 30));

        lblSave.setBackground(new java.awt.Color(133, 141, 144));
        lblSave.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblSave.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSave.setText("Save Changes");
        lblSave.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblSave.setOpaque(true);
        lblSave.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblSaveMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblSaveMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblSaveMouseExited(evt);
            }
        });
        add(lblSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 330, 110, 30));

        cmbCustomerName.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbCustomerNameItemStateChanged(evt);
            }
        });
        add(cmbCustomerName, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 50, 140, 25));

        lblClose.setBackground(new java.awt.Color(210, 240, 252));
        lblClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lk/edu/ijse/assignment/images/icons8-Close Window-20.png"))); // NOI18N
        lblClose.setOpaque(true);
        lblClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblCloseMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblCloseMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblCloseMouseExited(evt);
            }
        });
        add(lblClose, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 10, -1, 20));

        cmbItem.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " " }));
        cmbItem.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbItemItemStateChanged(evt);
            }
        });
        add(cmbItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 370, 160, 25));
    }// </editor-fold>//GEN-END:initComponents

    private void lblConfirmMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblConfirmMouseEntered
        lblConfirm.setBackground(new Color(161, 169, 172  ));
    }//GEN-LAST:event_lblConfirmMouseEntered

    private void lblConfirmMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblConfirmMouseExited
        lblConfirm.setBackground(new Color(133,141,144));
    }//GEN-LAST:event_lblConfirmMouseExited

    private void lblRemoveMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblRemoveMouseEntered
        lblRemove.setBackground(new Color(161, 169, 172  ));
    }//GEN-LAST:event_lblRemoveMouseEntered

    private void lblRemoveMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblRemoveMouseExited
        lblRemove.setBackground(new Color(133,141,144 ));
    }//GEN-LAST:event_lblRemoveMouseExited

    private void lblSaveMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblSaveMouseEntered
        lblSave.setBackground(new Color(161, 169, 172  ));
    }//GEN-LAST:event_lblSaveMouseEntered

    private void lblSaveMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblSaveMouseExited
        lblSave.setBackground(new Color(133,141,144   ));
    }//GEN-LAST:event_lblSaveMouseExited

    private void txtQtyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQtyKeyReleased
        
    }//GEN-LAST:event_txtQtyKeyReleased

    private void txtQtyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQtyKeyTyped
        char c=evt.getKeyChar();
        if(!Character.isDigit(c)){
            evt.consume();
        }
    }//GEN-LAST:event_txtQtyKeyTyped

    private void lblCloseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCloseMouseClicked
        System.exit(0);
    }//GEN-LAST:event_lblCloseMouseClicked

    private void lblCloseMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCloseMouseEntered
        lblClose.setBackground(new Color(241, 166, 166));
    }//GEN-LAST:event_lblCloseMouseEntered

    private void lblCloseMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCloseMouseExited
        lblClose.setBackground(new Color(210,240,252 ));
    }//GEN-LAST:event_lblCloseMouseExited

    private void cmbCustomerNameItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbCustomerNameItemStateChanged
        String name=(String) cmbCustomerName.getSelectedItem();
        int cid=0;
        
        for (CustomerDTO c : customerList) {
            if(c.getCustomerName().equals(name)){
                cid=c.getCid();
                txtTel.setText(c.getTel());
            }
        }
        
        //Get the chosen Customer made Orders
        try {
            ordersList=ctrlCashier.searchcustomerOrders(cid);
            if(ordersList!=null){
                for (OrdersDTO o : ordersList) {
                    cmbOrderID.addItem(o.getOid());
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(ManageOrder.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cmbCustomerNameItemStateChanged

    private void cmbOrderIDItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbOrderIDItemStateChanged
        Integer oid=(Integer) cmbOrderID.getSelectedItem();
        
        //Fill the chosen Order's details(Order date of the made order)
        for (OrdersDTO o : ordersList) {
            if(oid.equals(o.getOid())){
                oid=o.getOid();
                txtOrderDate.setText(o.getOrderDate());
            }
        }
        
        //Get ordered Item Details of the chosen Order
        DefaultTableModel dtm=(DefaultTableModel) tblManageOrder.getModel();
        dtm.setRowCount(0);
        
        int qty=0;
        double unitPrice=0.0;
        double oldTotal=0.0;
        double total=0.0;
        
        for (OrderDetailDTO or : orderDetailList) {
            if(oid.equals(or.getOid())){
                int orderQty=or.getOrderQty();
                
                for (ItemDTO i : itemList) {
                    if(i.getItemCode()==or.getItemCode()){
                        unitPrice=i.getUnitPrice();
                        double tempTot=unitPrice*orderQty;
                        oldTotal+=tempTot;
                        Object [] rowData={i.getItemCode(),i.getDescription(),orderQty,tempTot};
                        dtm.addRow(rowData);
                    }
                }
            }
        }
        txtOldTotal.setText(""+oldTotal);
        clear();
        
        calculateNewTotal();
    }//GEN-LAST:event_cmbOrderIDItemStateChanged

    private void tblManageOrderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblManageOrderMouseClicked
        DefaultTableModel dtm=(DefaultTableModel) tblManageOrder.getModel();
        
        Integer itemCode=Integer.parseInt(dtm.getValueAt(tblManageOrder.getSelectedRow(), 0).toString());
        
        //Fill the textfield when select the item from the table row
        for (ItemDTO i : itemList) {
            if(itemCode.equals(i.getItemCode())){
                cmbItem.setSelectedItem(i.getDescription());
                txtUnitPrice.setText(""+i.getUnitPrice());
                txtQtyOnHand.setText(""+i.getQtyOnHand());
                txtQty.setText(""+dtm.getValueAt(tblManageOrder.getSelectedRow(), 2));
            }
        }
        txtQty.requestFocus();
        txtQty.selectAll();
    }//GEN-LAST:event_tblManageOrderMouseClicked

    private void cmbItemItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbItemItemStateChanged
        String name=(String) cmbItem.getSelectedItem();
        
        //Select a new Item to add this Order
        for (ItemDTO i : itemList) {
            if(name.equals(i.getDescription())){
                txtUnitPrice.setText(""+i.getUnitPrice());
                txtQtyOnHand.setText(""+i.getQtyOnHand());
                txtQty.setText("");
                txtQty.requestFocus();
            }
        }
    }//GEN-LAST:event_cmbItemItemStateChanged

    private void lblRemoveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblRemoveMouseClicked
        DefaultTableModel dtm=(DefaultTableModel) tblManageOrder.getModel();
        int removeRow=tblManageOrder.getSelectedRow();
        Integer oid=Integer.parseInt(cmbOrderID.getSelectedItem().toString());
        
        Integer itemCode=Integer.parseInt(dtm.getValueAt(removeRow, 0).toString());
        String itemName=(String) dtm.getValueAt(removeRow, 1);
        Integer orderQty=Integer.parseInt(dtm.getValueAt(removeRow, 2).toString());
        
        for (OrderDetailDTO o : orderDetailList) {
            if(oid.equals(o.getOid()) && itemCode.equals(o.getItemCode())){
                removeOrdersList.add(o);
                for (ItemDTO i : itemList) {
                    if(itemCode.equals(i.getItemCode())){
                        i.setQtyOnHand(i.getQtyOnHand()+orderQty);
                        updateList.add(i);
                    }
                }
            }
        }
        
        
        dtm.removeRow(removeRow);
        calculateNewTotal();
    }//GEN-LAST:event_lblRemoveMouseClicked

    private void lblSaveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblSaveMouseClicked
        saveChanges();        
    }//GEN-LAST:event_lblSaveMouseClicked

    private void lblConfirmMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblConfirmMouseClicked
        DefaultTableModel dtm=(DefaultTableModel) tblManageOrder.getModel();
        int oid=(int) cmbOrderID.getSelectedItem();
        
        OrdersDTO order=null;
        for (OrdersDTO o : ordersList) {
            if(oid==o.getOid()){
                order=o;
            }
        }
        
        for (int i = 0; i < dtm.getRowCount(); i++) {
            Integer itemCode=Integer.parseInt(dtm.getValueAt(i, 0).toString());
            Integer orderQty=Integer.parseInt(dtm.getValueAt(i, 2).toString());
            
            //Modify the exsisting orderdetail in this order
            for (OrderDetailDTO o : list) {
                if(itemCode.equals(o.getItemCode()) && o.getOrderQty()!=orderQty && o.getOid()==oid){
                    OrderDetailDTO newO=o;
                    o.setOrderQty(orderQty);
                    orderList.add(newO);   //Add the modified orderdetail into attribute of orderList
                }
            }
        }
        
        for (ItemDTO i : updateList) {
            System.out.println("Item Name"+i.getDescription()+"     "+i.getQtyOnHand());
        }
        
        try {
            boolean result=ctrlCashier.modifyOrder(orderList,updateList,order,removeOrdersList);
            if(result){
                JOptionPane.showMessageDialog(this, "Successfully Modified");
            }else{
                JOptionPane.showMessageDialog(this, "Failed to Modify");
            }

        } catch (Exception ex) {
            Logger.getLogger(ManageOrder.class.getName()).log(Level.SEVERE, null, ex);
        }
        clear();
    }//GEN-LAST:event_lblConfirmMouseClicked

    private void txtQtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQtyActionPerformed
        saveChanges();
    }//GEN-LAST:event_txtQtyActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cmbCustomerName;
    private javax.swing.JComboBox cmbItem;
    private javax.swing.JComboBox cmbOrderID;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel lblClose;
    private javax.swing.JLabel lblConfirm;
    private javax.swing.JLabel lblRemove;
    private javax.swing.JLabel lblSave;
    private javax.swing.JTable tblManageOrder;
    private javax.swing.JTextField txtNewTotal;
    private javax.swing.JTextField txtOldTotal;
    private javax.swing.JTextField txtOrderDate;
    private javax.swing.JTextField txtQty;
    private javax.swing.JTextField txtQtyOnHand;
    private javax.swing.JTextField txtTel;
    private javax.swing.JTextField txtUnitPrice;
    // End of variables declaration//GEN-END:variables

    private void clear() {
        cmbItem.setSelectedItem("");
        txtUnitPrice.setText("");
        txtQtyOnHand.setText("");
        txtQty.setText("");
    }

    private void calculateNewTotal() {
        DefaultTableModel dtm=(DefaultTableModel) tblManageOrder.getModel();
        
        double total=0.0;
        for (int i = 0; i < dtm.getRowCount(); i++) {
            total+=Double.parseDouble(dtm.getValueAt(i, 3).toString());
        }
        txtNewTotal.setText(""+total);
    }

    private void saveChanges() {
        DefaultTableModel dtm=(DefaultTableModel) tblManageOrder.getModel();
        
        int orderQty=0;
        String item=(String) cmbItem.getSelectedItem();
        if(!txtQty.getText().isEmpty()){
            orderQty=Integer.parseInt(txtQty.getText());
        }
        
        int itemCode=0;
        int qtyOnHand=0;
        double unitPrice=0.0;
        double total=0.0;
        
        for (int i = 0; i < dtm.getRowCount(); i++) {
            Integer tblQty=Integer.parseInt(dtm.getValueAt(i, 2).toString());
            if(item.equals(dtm.getValueAt(i, 1).toString())){
                
                //Add Item details to attribute of updateList for update the Items after the confirm the modify order
                for (ItemDTO it : itemList) {
                    if(item.equals(it.getDescription()) && tblQty<orderQty){
                        int newQty=orderQty-tblQty;
                        ItemDTO updateItem=new ItemDTO(
                                itemCode, item, 
                                it.getUnitPrice(), 
                                it.getQtyOnHand()-newQty
                        );
                        updateList.add(updateItem);    //Add the Items into attribute
                        
                    }else if(item.equals(it.getDescription()) && tblQty>orderQty){
                        int newQty=tblQty-orderQty;
                        ItemDTO updateItem=new ItemDTO(
                                itemCode, item, 
                                it.getUnitPrice(), 
                                it.getQtyOnHand()+newQty
                        );
                        updateList.add(updateItem);    //Add the Items into attribute
                    }
                }
                
                //Change the exsist Item Detail in this order
                unitPrice=Double.parseDouble(txtUnitPrice.getText());
                total=unitPrice*orderQty;
                dtm.setValueAt(orderQty, i, 2);
                dtm.setValueAt(total, i, 3);
                
                
                
                calculateNewTotal();  //Calculate the new Total of this bill
                clear();
                return;
            }else{
                
                //Add a new Item for this order
                for (ItemDTO it : itemList) {
                    if(item.equals(it.getDescription())){
                        itemCode=it.getItemCode();
                        unitPrice=it.getUnitPrice();
                        
                        ItemDTO updateItem=new ItemDTO(
                                itemCode, item, 
                                it.getUnitPrice(), 
                                it.getQtyOnHand()-orderQty
                        );
                        updateList.add(updateItem);    //Add the Items into attribute of updateList to Update the items
                        
                        //When New Item is added to this order, A new Orderdetail has to add
                        OrderDetailDTO od=new OrderDetailDTO(
                                itemCode, 
                                (int) cmbOrderID.getSelectedItem(), 
                                orderQty
                        );
                        orderList.add(od);   //Add the new orderdetail into attribute of orderList <OrderdetailDTO>
                    }
                }
            }
        }
        
        total=unitPrice*orderQty;
        if(itemCode!=0 && item!="" && orderQty!=0 && total!=0.0){
            Object [] rowData={itemCode,item,orderQty,total};
            dtm.addRow(rowData);
        }

        calculateNewTotal();  //Calculate the new Total of this bill
    }
}
