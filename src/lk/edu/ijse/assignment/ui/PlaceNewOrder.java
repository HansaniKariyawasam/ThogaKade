/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lk.edu.ijse.assignment.ui;

import java.awt.Color;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.border.Border;
import javax.swing.table.DefaultTableModel;
import lk.edu.ijse.assignment.controller.ControllerFactory;
import lk.edu.ijse.assignment.controller.custom.CashierController;
import lk.edu.ijse.assignment.dto.CustomerDTO;
import lk.edu.ijse.assignment.dto.ItemDTO;
import lk.edu.ijse.assignment.dto.OrderDetailDTO;
import lk.edu.ijse.assignment.dto.OrdersDTO;

/**
 *
 * @author Hansani Kariyawasam
 */
public class PlaceNewOrder extends javax.swing.JPanel {
    private CashierController ctrlCashier;
    private List<CustomerDTO> customerList;
    private List<ItemDTO> itemList;
    private List<OrdersDTO> ordersList;
    private double grandTotal;

    /**
     * Creates new form PlaceNewOrder
     */
    public PlaceNewOrder() {
        initComponents();
        lblRefresh.setVisible(false);
        ctrlCashier=(CashierController) ControllerFactory.getInstance().getControllerType(ControllerFactory.ControllerType.CASHIER);
        getStockDetails();
        viewCustomerDetails();
        txtOrderDate.getEditor().setEditable(false);
        try {
            ordersList=ctrlCashier.viewOrders();
        } catch (Exception ex) {
            Logger.getLogger(PlaceNewOrder.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    
    public void viewCustomerDetails(){
        try {
            customerList=ctrlCashier.viewCustomerDetails();
            cmbCustomerName.removeAllItems();
            if(customerList!=null){   
                for (CustomerDTO c : customerList) {
                    cmbCustomerName.addItem(c.getCustomerName());
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(PlaceNewOrder.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void getStockDetails(){
        try {
            itemList=ctrlCashier.getStockDetails();
            cmbItems.removeAllItems();
            if(itemList!=null){
                for (ItemDTO i : itemList) {
                    cmbItems.addItem(i.getDescription());
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(PlaceNewOrder.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblClose = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPlaceOrder = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        txtUnitPrice = new javax.swing.JTextField();
        txtTel = new javax.swing.JTextField();
        txtQtyOnHand = new javax.swing.JTextField();
        txtTotal = new javax.swing.JTextField();
        cmbPriority = new javax.swing.JComboBox();
        jSeparator2 = new javax.swing.JSeparator();
        lblConfirm = new javax.swing.JLabel();
        txtQty = new javax.swing.JTextField();
        lblAdd = new javax.swing.JLabel();
        cmbItems = new javax.swing.JComboBox();
        txtOrderDate = new org.jdesktop.swingx.JXDatePicker();
        cmbCustomerName = new javax.swing.JComboBox();
        lblAddCustomer = new javax.swing.JLabel();
        lblRefresh = new javax.swing.JLabel();

        setBackground(new java.awt.Color(210, 240, 252));
        addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                formPropertyChange(evt);
            }
        });
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblClose.setBackground(new java.awt.Color(210, 240, 252));
        lblClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lk/edu/ijse/assignment/images/icons8-Close Window-20.png"))); // NOI18N
        lblClose.setOpaque(true);
        lblClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblCloseMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblCloseMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblCloseMouseExited(evt);
            }
        });
        add(lblClose, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 10, -1, 20));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Place New Order");
        jLabel1.setToolTipText("Close");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 0, 185, 50));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setText("Customer Name");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 110, 28));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel3.setText("Contact ");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 80, 88, 28));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel4.setText("Order Date");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, 88, 28));

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel5.setText("Order Priority");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 120, 88, 28));

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel7.setText("Qty On Hand");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 230, 88, 28));

        jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel8.setText("Select Item");
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, 110, 28));

        jLabel9.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel9.setText("Unit Price");
        add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 190, 88, 28));

        jLabel10.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel10.setText("Total");
        add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 450, 40, 28));

        tblPlaceOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Code", "Description", "Qty", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPlaceOrder.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblPlaceOrder);
        if (tblPlaceOrder.getColumnModel().getColumnCount() > 0) {
            tblPlaceOrder.getColumnModel().getColumn(0).setResizable(false);
            tblPlaceOrder.getColumnModel().getColumn(1).setResizable(false);
            tblPlaceOrder.getColumnModel().getColumn(2).setResizable(false);
            tblPlaceOrder.getColumnModel().getColumn(3).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 330, 620, 110));

        jLabel11.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel11.setText("Order Qty ");
        add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 230, 88, 28));

        jSeparator1.setBackground(new java.awt.Color(133, 141, 144));
        add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 270, 650, 10));

        txtUnitPrice.setEditable(false);
        add(txtUnitPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 190, 160, 25));

        txtTel.setEditable(false);
        add(txtTel, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 80, 160, 25));

        txtQtyOnHand.setEditable(false);
        add(txtQtyOnHand, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 230, 160, 25));

        txtTotal.setEditable(false);
        add(txtTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 450, 100, 25));

        cmbPriority.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "High", "Medium", "Low" }));
        add(cmbPriority, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 120, 150, 25));

        jSeparator2.setBackground(new java.awt.Color(133, 141, 144));
        add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 162, 650, 10));

        lblConfirm.setBackground(new java.awt.Color(133, 141, 144));
        lblConfirm.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblConfirm.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblConfirm.setText("Confirm");
        lblConfirm.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblConfirm.setOpaque(true);
        lblConfirm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblConfirmMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblConfirmMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblConfirmMouseExited(evt);
            }
        });
        add(lblConfirm, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 470, 100, 35));

        txtQty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQtyActionPerformed(evt);
            }
        });
        txtQty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtQtyKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtQtyKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtQtyKeyTyped(evt);
            }
        });
        add(txtQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 230, 160, 25));

        lblAdd.setBackground(new java.awt.Color(133, 141, 144));
        lblAdd.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblAdd.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAdd.setText("Add");
        lblAdd.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblAdd.setOpaque(true);
        lblAdd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblAddMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblAddMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblAddMouseExited(evt);
            }
        });
        add(lblAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 280, 100, 35));

        cmbItems.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbItemsItemStateChanged(evt);
            }
        });
        add(cmbItems, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 190, 150, 25));

        txtOrderDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtOrderDateActionPerformed(evt);
            }
        });
        txtOrderDate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtOrderDateKeyTyped(evt);
            }
        });
        add(txtOrderDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 120, 160, 25));

        cmbCustomerName.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbCustomerNameItemStateChanged(evt);
            }
        });
        add(cmbCustomerName, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 80, 130, 25));

        lblAddCustomer.setBackground(new java.awt.Color(210, 240, 252));
        lblAddCustomer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAddCustomer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lk/edu/ijse/assignment/images/icons8-Add User Group Man Man-30.png"))); // NOI18N
        lblAddCustomer.setToolTipText("Add New Customer");
        lblAddCustomer.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(133, 141, 144)));
        lblAddCustomer.setOpaque(true);
        lblAddCustomer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblAddCustomerMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblAddCustomerMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblAddCustomerMouseExited(evt);
            }
        });
        add(lblAddCustomer, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 80, 40, 30));

        lblRefresh.setBackground(new java.awt.Color(210, 240, 252));
        lblRefresh.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lk/edu/ijse/assignment/images/icons8-refresh.png"))); // NOI18N
        lblRefresh.setToolTipText("Refresh");
        lblRefresh.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(133, 141, 144), 1, true));
        lblRefresh.setOpaque(true);
        lblRefresh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblRefreshMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblRefreshMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblRefreshMouseExited(evt);
            }
        });
        add(lblRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 80, 30, 25));
    }// </editor-fold>//GEN-END:initComponents

    private void lblCloseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCloseMouseClicked
        System.exit(0);
    }//GEN-LAST:event_lblCloseMouseClicked

    private void lblConfirmMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblConfirmMouseEntered
        lblConfirm.setBackground(new Color(161, 169, 172  ));
    }//GEN-LAST:event_lblConfirmMouseEntered

    private void lblConfirmMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblConfirmMouseExited
        lblConfirm.setBackground(new Color(133,141,144));
    }//GEN-LAST:event_lblConfirmMouseExited

    private void lblAddMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblAddMouseEntered
        lblAdd.setBackground(new Color(161, 169, 172  ));
    }//GEN-LAST:event_lblAddMouseEntered

    private void lblAddMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblAddMouseExited
        lblAdd.setBackground(new Color(133,141,144));
    }//GEN-LAST:event_lblAddMouseExited

    private void lblAddCustomerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblAddCustomerMouseClicked
       AddNewCustomer customerPnl= new AddNewCustomer();
       customerPnl.setOrderPanel(this);
       customerPnl.setVisible(true);

    }//GEN-LAST:event_lblAddCustomerMouseClicked

    private void txtQtyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQtyKeyTyped
        char c=evt.getKeyChar();
        if(!Character.isDigit(c)){
            evt.consume();//Prevent to type any letters
        }
        txtQty.setBorder(BorderFactory.createEmptyBorder());
    }//GEN-LAST:event_txtQtyKeyTyped

    private void txtQtyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQtyKeyReleased
        
    }//GEN-LAST:event_txtQtyKeyReleased

    private void txtQtyKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQtyKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtQtyKeyPressed

    private void lblAddCustomerMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblAddCustomerMouseEntered
        lblAddCustomer.setBackground(new Color(211, 219, 222));
    }//GEN-LAST:event_lblAddCustomerMouseEntered

    private void lblAddCustomerMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblAddCustomerMouseExited
        lblAddCustomer.setBackground(new Color(210,240,252 ));
    }//GEN-LAST:event_lblAddCustomerMouseExited

    private void lblCloseMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCloseMouseEntered
        lblClose.setBackground(new Color(241, 166, 166));
    }//GEN-LAST:event_lblCloseMouseEntered

    private void lblCloseMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCloseMouseExited
        lblClose.setBackground(new Color(210,240,252 ));
    }//GEN-LAST:event_lblCloseMouseExited

    private void cmbCustomerNameItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbCustomerNameItemStateChanged
        String name=(String) cmbCustomerName.getSelectedItem();
        for (CustomerDTO c : customerList) {
            if(c.getCustomerName()==name){
                txtTel.setText(c.getTel());
                break;
            }
        }
        
        clear();
    }//GEN-LAST:event_cmbCustomerNameItemStateChanged

    private void cmbItemsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbItemsItemStateChanged
        String desc=(String) cmbItems.getSelectedItem();
        for (ItemDTO i : itemList) {
            if(i.getDescription()==desc){
                txtQtyOnHand.setText(""+i.getQtyOnHand());
                txtUnitPrice.setText(""+i.getUnitPrice());
                txtQty.requestFocus();
                break;
            }
        }
    }//GEN-LAST:event_cmbItemsItemStateChanged

    private void lblAddMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblAddMouseClicked
        addOrderDetails();
    }//GEN-LAST:event_lblAddMouseClicked

    private void txtQtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQtyActionPerformed
        addOrderDetails();
    }//GEN-LAST:event_txtQtyActionPerformed

    private void lblConfirmMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblConfirmMouseClicked
        String name=(String) cmbCustomerName.getSelectedItem();
        CustomerDTO customer=null;
        for (CustomerDTO c : customerList) {
            if(c.getCustomerName().equals(name)){
                customer=c;
            }else{
                continue;
            }
        }
        
        int orderID=1;
        if (ordersList != null && !ordersList.isEmpty()) {
            OrdersDTO or = ordersList.get(ordersList.size()-1);
            orderID=(or.getOid()+1);//Decide the next order Id of Orders table in database
        }
        
        Date date=txtOrderDate.getDate();
        SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
        String orderpriority=(String) cmbPriority.getSelectedItem();
        
        if(txtOrderDate.getEditor().getText().equals("")){
            Border border=BorderFactory.createLineBorder(Color.RED);
            txtOrderDate.getEditor().setBorder(border);
        }else{
            String orderDate=sdf.format(date);
            OrdersDTO order=new OrdersDTO(orderDate, orderpriority);
        
            DefaultTableModel dtm=(DefaultTableModel) tblPlaceOrder.getModel();
            List<OrderDetailDTO> orderDetailList=new ArrayList<>();//Create OrderDetails List to add
            List<ItemDTO> updateItemList=new ArrayList<>();//Create Item List to update
            for (int j = 0; j < dtm.getRowCount(); j++) {
                OrderDetailDTO orderDetail=new OrderDetailDTO(
                    (int) dtm.getValueAt(j, 0),
                    orderID , 
                    (int) dtm.getValueAt(j, 2)
                );
                orderDetailList.add(orderDetail);

                for (ItemDTO i : itemList) {
                    String desc=(String) dtm.getValueAt(j, 1);
                    if(i.getDescription()==desc){
                        int newQty=i.getQtyOnHand()-Integer.parseInt(dtm.getValueAt(j, 2).toString());
                        ItemDTO item=new ItemDTO(
                                (int) dtm.getValueAt(j, 0), 
                                (String) dtm.getValueAt(j, 1), 
                                newQty,
                                i.getUnitPrice()
                        );
                        updateItemList.add(item);
                    }
                }
            }
            
            try {
                boolean isMadePlaceOrder=ctrlCashier.placeNewOrder(order, orderDetailList, updateItemList,customer);
                if(isMadePlaceOrder){
                    JOptionPane.showMessageDialog(this, "Successful");
                    clear();
                }else{
                    JOptionPane.showMessageDialog(this, "Failed");
                }
            } catch (Exception ex) {
                Logger.getLogger(PlaceNewOrder.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }//GEN-LAST:event_lblConfirmMouseClicked

    private void txtOrderDateKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtOrderDateKeyTyped
        char c=evt.getKeyChar();
        System.out.println(c);
        if(Character.isLetter(c)){
            evt.consume();
        }
        txtOrderDate.getEditor().setBorder(BorderFactory.createEmptyBorder());
    }//GEN-LAST:event_txtOrderDateKeyTyped

    private void txtOrderDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOrderDateActionPerformed
        txtOrderDate.getEditor().setBorder(BorderFactory.createEmptyBorder());
    }//GEN-LAST:event_txtOrderDateActionPerformed

    private void formPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_formPropertyChange
        txtOrderDate.getMonthView().setLowerBound(new Date());
    }//GEN-LAST:event_formPropertyChange

    private void lblRefreshMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblRefreshMouseClicked
        viewCustomerDetails();
    }//GEN-LAST:event_lblRefreshMouseClicked

    private void lblRefreshMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblRefreshMouseEntered
         lblRefresh.setBackground(new Color(211, 219, 222));
    }//GEN-LAST:event_lblRefreshMouseEntered

    private void lblRefreshMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblRefreshMouseExited
        lblRefresh.setBackground(new Color(210,240,252 ));
    }//GEN-LAST:event_lblRefreshMouseExited


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cmbCustomerName;
    private javax.swing.JComboBox cmbItems;
    private javax.swing.JComboBox cmbPriority;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lblAdd;
    private javax.swing.JLabel lblAddCustomer;
    private javax.swing.JLabel lblClose;
    private javax.swing.JLabel lblConfirm;
    private javax.swing.JLabel lblRefresh;
    private javax.swing.JTable tblPlaceOrder;
    private org.jdesktop.swingx.JXDatePicker txtOrderDate;
    private javax.swing.JTextField txtQty;
    private javax.swing.JTextField txtQtyOnHand;
    private javax.swing.JTextField txtTel;
    private javax.swing.JTextField txtTotal;
    private javax.swing.JTextField txtUnitPrice;
    // End of variables declaration//GEN-END:variables

    private void clearQty() {
        txtQty.setText("");
        txtQty.requestFocus();
    }

    private void addOrderDetails() {
        Border border=BorderFactory.createLineBorder(Color.RED);
        DefaultTableModel dtm=(DefaultTableModel) tblPlaceOrder.getModel();
        
        String desc=(String) cmbItems.getSelectedItem();        
        double unitPrice=Double.parseDouble(txtUnitPrice.getText());
        int qtyOnHand=Integer.parseInt(txtQtyOnHand.getText());
        
        int itemCode=0;        
        int orderQty=0;
        double total=0.0;        
        
        String qty=txtQty.getText();
        
        if(qty.equals("")){
            //If it is empty add a red border to recognize it
            txtQty.setBorder(border);
        }else{
            orderQty=Integer.parseInt(qty);
            for (ItemDTO i : itemList) {
                //Get the ItemCode form the global variable of itemList(Type is List<ItemDTO>)
                if(i.getDescription()==desc){
                    itemCode=i.getItemCode();
                    break;
                }
            }
            
            for (int i = 0; i < dtm.getRowCount(); i++) {
                //If you add same Item to the Order again 
                String code=(String) dtm.getValueAt(i, 1);
                if(desc.equals(code)){       
                    Integer preQty= Integer.parseInt(dtm.getValueAt(i, 2).toString());
                 
                    Double amountTemp=Double.parseDouble(dtm.getValueAt(i, 3).toString())  ;
                    orderQty+=preQty;
                    grandTotal-=amountTemp;

                    
                    txtTotal.setText(""+grandTotal);
                    dtm.removeRow(i);
                }
            }
            total=orderQty*unitPrice;
            grandTotal+=total;
            txtTotal.setText(""+grandTotal);
            Object [] rowData={itemCode,desc,orderQty,total};
            dtm.addRow(rowData);
            clearQty();
        }
    }

    private void clear() { //After confirm the Order clear all the textfield
        txtOrderDate.getEditor().setText("");
        txtQty.setText("");
        DefaultTableModel dtm=(DefaultTableModel) tblPlaceOrder.getModel();
        dtm.setRowCount(0);
        getStockDetails();
    }
}
